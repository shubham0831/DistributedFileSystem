// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: messages.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionAddress string `protobuf:"bytes,2,opt,name=ConnectionAddress,proto3" json:"ConnectionAddress,omitempty"`
	TotalSize         uint64 `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Registration) GetConnectionAddress() string {
	if x != nil {
		return x.ConnectionAddress
	}
	return ""
}

func (x *Registration) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type RegistrationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool   `protobuf:"varint,1,opt,name=Accepted,proto3" json:"Accepted,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationAck) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *RegistrationAck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegistrationAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Alive        bool   `protobuf:"varint,2,opt,name=Alive,proto3" json:"Alive,omitempty"`
	UsedSpace    uint64 `protobuf:"varint,3,opt,name=UsedSpace,proto3" json:"UsedSpace,omitempty"`
	TotalRequest int64  `protobuf:"varint,4,opt,name=TotalRequest,proto3" json:"TotalRequest,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *HeartBeat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HeartBeat) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *HeartBeat) GetUsedSpace() uint64 {
	if x != nil {
		return x.UsedSpace
	}
	return 0
}

func (x *HeartBeat) GetTotalRequest() int64 {
	if x != nil {
		return x.TotalRequest
	}
	return 0
}

type Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Messages:
	//	*Wrapper_Registration
	//	*Wrapper_RegistrationAck
	//	*Wrapper_HeartBeat
	//	*Wrapper_ClientCommands
	//	*Wrapper_CommandResponse
	//	*Wrapper_ChunkedFile
	//	*Wrapper_ChunkedReceivedAck
	//	*Wrapper_SendReplicaRequest
	//	*Wrapper_GetChunkRequest
	//	*Wrapper_GetChunkResponse
	//	*Wrapper_ComputeJob
	//	*Wrapper_ComputeCommands
	//	*Wrapper_MRStatusUpdate
	Messages isWrapper_Messages `protobuf_oneof:"messages"`
}

func (x *Wrapper) Reset() {
	*x = Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapper) ProtoMessage() {}

func (x *Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapper.ProtoReflect.Descriptor instead.
func (*Wrapper) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (m *Wrapper) GetMessages() isWrapper_Messages {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (x *Wrapper) GetRegistration() *Registration {
	if x, ok := x.GetMessages().(*Wrapper_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *Wrapper) GetRegistrationAck() *RegistrationAck {
	if x, ok := x.GetMessages().(*Wrapper_RegistrationAck); ok {
		return x.RegistrationAck
	}
	return nil
}

func (x *Wrapper) GetHeartBeat() *HeartBeat {
	if x, ok := x.GetMessages().(*Wrapper_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *Wrapper) GetClientCommands() *ClientCommands {
	if x, ok := x.GetMessages().(*Wrapper_ClientCommands); ok {
		return x.ClientCommands
	}
	return nil
}

func (x *Wrapper) GetCommandResponse() *CommandResponse {
	if x, ok := x.GetMessages().(*Wrapper_CommandResponse); ok {
		return x.CommandResponse
	}
	return nil
}

func (x *Wrapper) GetChunkedFile() *ChunkedFile {
	if x, ok := x.GetMessages().(*Wrapper_ChunkedFile); ok {
		return x.ChunkedFile
	}
	return nil
}

func (x *Wrapper) GetChunkedReceivedAck() *ChunkReceivedAck {
	if x, ok := x.GetMessages().(*Wrapper_ChunkedReceivedAck); ok {
		return x.ChunkedReceivedAck
	}
	return nil
}

func (x *Wrapper) GetSendReplicaRequest() *SendReplicaRequest {
	if x, ok := x.GetMessages().(*Wrapper_SendReplicaRequest); ok {
		return x.SendReplicaRequest
	}
	return nil
}

func (x *Wrapper) GetGetChunkRequest() *GetChunkRequest {
	if x, ok := x.GetMessages().(*Wrapper_GetChunkRequest); ok {
		return x.GetChunkRequest
	}
	return nil
}

func (x *Wrapper) GetGetChunkResponse() *GetChunkResponse {
	if x, ok := x.GetMessages().(*Wrapper_GetChunkResponse); ok {
		return x.GetChunkResponse
	}
	return nil
}

func (x *Wrapper) GetComputeJob() *ComputeJob {
	if x, ok := x.GetMessages().(*Wrapper_ComputeJob); ok {
		return x.ComputeJob
	}
	return nil
}

func (x *Wrapper) GetComputeCommands() *ComputeCommands {
	if x, ok := x.GetMessages().(*Wrapper_ComputeCommands); ok {
		return x.ComputeCommands
	}
	return nil
}

func (x *Wrapper) GetMRStatusUpdate() *MRStatusUpdate {
	if x, ok := x.GetMessages().(*Wrapper_MRStatusUpdate); ok {
		return x.MRStatusUpdate
	}
	return nil
}

type isWrapper_Messages interface {
	isWrapper_Messages()
}

type Wrapper_Registration struct {
	Registration *Registration `protobuf:"bytes,1,opt,name=Registration,proto3,oneof"`
}

type Wrapper_RegistrationAck struct {
	RegistrationAck *RegistrationAck `protobuf:"bytes,2,opt,name=RegistrationAck,proto3,oneof"`
}

type Wrapper_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,3,opt,name=HeartBeat,proto3,oneof"`
}

type Wrapper_ClientCommands struct {
	ClientCommands *ClientCommands `protobuf:"bytes,4,opt,name=ClientCommands,proto3,oneof"`
}

type Wrapper_CommandResponse struct {
	CommandResponse *CommandResponse `protobuf:"bytes,5,opt,name=CommandResponse,proto3,oneof"`
}

type Wrapper_ChunkedFile struct {
	ChunkedFile *ChunkedFile `protobuf:"bytes,6,opt,name=ChunkedFile,proto3,oneof"`
}

type Wrapper_ChunkedReceivedAck struct {
	ChunkedReceivedAck *ChunkReceivedAck `protobuf:"bytes,7,opt,name=ChunkedReceivedAck,proto3,oneof"`
}

type Wrapper_SendReplicaRequest struct {
	SendReplicaRequest *SendReplicaRequest `protobuf:"bytes,8,opt,name=SendReplicaRequest,proto3,oneof"`
}

type Wrapper_GetChunkRequest struct {
	GetChunkRequest *GetChunkRequest `protobuf:"bytes,9,opt,name=GetChunkRequest,proto3,oneof"`
}

type Wrapper_GetChunkResponse struct {
	GetChunkResponse *GetChunkResponse `protobuf:"bytes,10,opt,name=GetChunkResponse,proto3,oneof"`
}

type Wrapper_ComputeJob struct {
	ComputeJob *ComputeJob `protobuf:"bytes,11,opt,name=ComputeJob,proto3,oneof"`
}

type Wrapper_ComputeCommands struct {
	ComputeCommands *ComputeCommands `protobuf:"bytes,12,opt,name=ComputeCommands,proto3,oneof"` // from computation manager to server // ideally this would be in a separate protofile
}

type Wrapper_MRStatusUpdate struct {
	MRStatusUpdate *MRStatusUpdate `protobuf:"bytes,13,opt,name=MRStatusUpdate,proto3,oneof"`
}

func (*Wrapper_Registration) isWrapper_Messages() {}

func (*Wrapper_RegistrationAck) isWrapper_Messages() {}

func (*Wrapper_HeartBeat) isWrapper_Messages() {}

func (*Wrapper_ClientCommands) isWrapper_Messages() {}

func (*Wrapper_CommandResponse) isWrapper_Messages() {}

func (*Wrapper_ChunkedFile) isWrapper_Messages() {}

func (*Wrapper_ChunkedReceivedAck) isWrapper_Messages() {}

func (*Wrapper_SendReplicaRequest) isWrapper_Messages() {}

func (*Wrapper_GetChunkRequest) isWrapper_Messages() {}

func (*Wrapper_GetChunkResponse) isWrapper_Messages() {}

func (*Wrapper_ComputeJob) isWrapper_Messages() {}

func (*Wrapper_ComputeCommands) isWrapper_Messages() {}

func (*Wrapper_MRStatusUpdate) isWrapper_Messages() {}

type MRStatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobComplete bool   `protobuf:"varint,1,opt,name=jobComplete,proto3" json:"jobComplete,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MRStatusUpdate) Reset() {
	*x = MRStatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRStatusUpdate) ProtoMessage() {}

func (x *MRStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRStatusUpdate.ProtoReflect.Descriptor instead.
func (*MRStatusUpdate) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *MRStatusUpdate) GetJobComplete() bool {
	if x != nil {
		return x.JobComplete
	}
	return false
}

func (x *MRStatusUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChunkedMappedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName       string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	JobId          string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	NumberOfChunks int32  `protobuf:"varint,3,opt,name=numberOfChunks,proto3" json:"numberOfChunks,omitempty"`
	ChunkName      string `protobuf:"bytes,4,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkNumber    int32  `protobuf:"varint,5,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	ChunkSize      int64  `protobuf:"varint,6,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	ChunkedFile    []byte `protobuf:"bytes,7,opt,name=chunkedFile,proto3" json:"chunkedFile,omitempty"`
	StartingOffset int64  `protobuf:"varint,8,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
}

func (x *ChunkedMappedFile) Reset() {
	*x = ChunkedMappedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedMappedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedMappedFile) ProtoMessage() {}

func (x *ChunkedMappedFile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedMappedFile.ProtoReflect.Descriptor instead.
func (*ChunkedMappedFile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ChunkedMappedFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ChunkedMappedFile) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ChunkedMappedFile) GetNumberOfChunks() int32 {
	if x != nil {
		return x.NumberOfChunks
	}
	return 0
}

func (x *ChunkedMappedFile) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *ChunkedMappedFile) GetChunkNumber() int32 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *ChunkedMappedFile) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ChunkedMappedFile) GetChunkedFile() []byte {
	if x != nil {
		return x.ChunkedFile
	}
	return nil
}

func (x *ChunkedMappedFile) GetStartingOffset() int64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

type ComputeCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Commands:
	//	*ComputeCommands_FileInfoRequest
	//	*ComputeCommands_FileInfoResponse
	//	*ComputeCommands_RunJobRequest
	//	*ComputeCommands_RunJobResponse
	Commands isComputeCommands_Commands `protobuf_oneof:"commands"`
}

func (x *ComputeCommands) Reset() {
	*x = ComputeCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeCommands) ProtoMessage() {}

func (x *ComputeCommands) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeCommands.ProtoReflect.Descriptor instead.
func (*ComputeCommands) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (m *ComputeCommands) GetCommands() isComputeCommands_Commands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (x *ComputeCommands) GetFileInfoRequest() *FileInfoRequest {
	if x, ok := x.GetCommands().(*ComputeCommands_FileInfoRequest); ok {
		return x.FileInfoRequest
	}
	return nil
}

func (x *ComputeCommands) GetFileInfoResponse() *FileInfoResponse {
	if x, ok := x.GetCommands().(*ComputeCommands_FileInfoResponse); ok {
		return x.FileInfoResponse
	}
	return nil
}

func (x *ComputeCommands) GetRunJobRequest() *RunJobRequest {
	if x, ok := x.GetCommands().(*ComputeCommands_RunJobRequest); ok {
		return x.RunJobRequest
	}
	return nil
}

func (x *ComputeCommands) GetRunJobResponse() *RunJobResponse {
	if x, ok := x.GetCommands().(*ComputeCommands_RunJobResponse); ok {
		return x.RunJobResponse
	}
	return nil
}

type isComputeCommands_Commands interface {
	isComputeCommands_Commands()
}

type ComputeCommands_FileInfoRequest struct {
	FileInfoRequest *FileInfoRequest `protobuf:"bytes,1,opt,name=FileInfoRequest,proto3,oneof"`
}

type ComputeCommands_FileInfoResponse struct {
	FileInfoResponse *FileInfoResponse `protobuf:"bytes,2,opt,name=FileInfoResponse,proto3,oneof"`
}

type ComputeCommands_RunJobRequest struct {
	RunJobRequest *RunJobRequest `protobuf:"bytes,3,opt,name=RunJobRequest,proto3,oneof"`
}

type ComputeCommands_RunJobResponse struct {
	RunJobResponse *RunJobResponse `protobuf:"bytes,4,opt,name=RunJobResponse,proto3,oneof"`
}

func (*ComputeCommands_FileInfoRequest) isComputeCommands_Commands() {}

func (*ComputeCommands_FileInfoResponse) isComputeCommands_Commands() {}

func (*ComputeCommands_RunJobRequest) isComputeCommands_Commands() {}

func (*ComputeCommands_RunJobResponse) isComputeCommands_Commands() {}

type RunJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RunJobRequest_ReduceRequest
	//	*RunJobRequest_MapRequest
	//	*RunJobRequest_ChunkedMappedFile
	//	*RunJobRequest_PluginDownload
	Request isRunJobRequest_Request `protobuf_oneof:"request"`
}

func (x *RunJobRequest) Reset() {
	*x = RunJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunJobRequest) ProtoMessage() {}

func (x *RunJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunJobRequest.ProtoReflect.Descriptor instead.
func (*RunJobRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (m *RunJobRequest) GetRequest() isRunJobRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RunJobRequest) GetReduceRequest() *ReduceRequest {
	if x, ok := x.GetRequest().(*RunJobRequest_ReduceRequest); ok {
		return x.ReduceRequest
	}
	return nil
}

func (x *RunJobRequest) GetMapRequest() *MapRequest {
	if x, ok := x.GetRequest().(*RunJobRequest_MapRequest); ok {
		return x.MapRequest
	}
	return nil
}

func (x *RunJobRequest) GetChunkedMappedFile() *ChunkedMappedFile {
	if x, ok := x.GetRequest().(*RunJobRequest_ChunkedMappedFile); ok {
		return x.ChunkedMappedFile
	}
	return nil
}

func (x *RunJobRequest) GetPluginDownload() *PluginDownload {
	if x, ok := x.GetRequest().(*RunJobRequest_PluginDownload); ok {
		return x.PluginDownload
	}
	return nil
}

type isRunJobRequest_Request interface {
	isRunJobRequest_Request()
}

type RunJobRequest_ReduceRequest struct {
	ReduceRequest *ReduceRequest `protobuf:"bytes,1,opt,name=reduceRequest,proto3,oneof"`
}

type RunJobRequest_MapRequest struct {
	MapRequest *MapRequest `protobuf:"bytes,2,opt,name=mapRequest,proto3,oneof"`
}

type RunJobRequest_ChunkedMappedFile struct {
	ChunkedMappedFile *ChunkedMappedFile `protobuf:"bytes,3,opt,name=chunkedMappedFile,proto3,oneof"`
}

type RunJobRequest_PluginDownload struct {
	PluginDownload *PluginDownload `protobuf:"bytes,4,opt,name=pluginDownload,proto3,oneof"`
}

func (*RunJobRequest_ReduceRequest) isRunJobRequest_Request() {}

func (*RunJobRequest_MapRequest) isRunJobRequest_Request() {}

func (*RunJobRequest_ChunkedMappedFile) isRunJobRequest_Request() {}

func (*RunJobRequest_PluginDownload) isRunJobRequest_Request() {}

type PluginDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId      string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Plugin     []byte `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
	PluginName string `protobuf:"bytes,3,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
}

func (x *PluginDownload) Reset() {
	*x = PluginDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDownload) ProtoMessage() {}

func (x *PluginDownload) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDownload.ProtoReflect.Descriptor instead.
func (*PluginDownload) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *PluginDownload) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *PluginDownload) GetPlugin() []byte {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *PluginDownload) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

type ReduceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId          string                     `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ReducerFileMap map[string]*ReduceFileList `protobuf:"bytes,2,rep,name=reducerFileMap,proto3" json:"reducerFileMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TargetPath     string                     `protobuf:"bytes,3,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
}

func (x *ReduceRequest) Reset() {
	*x = ReduceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceRequest) ProtoMessage() {}

func (x *ReduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceRequest.ProtoReflect.Descriptor instead.
func (*ReduceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *ReduceRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ReduceRequest) GetReducerFileMap() map[string]*ReduceFileList {
	if x != nil {
		return x.ReducerFileMap
	}
	return nil
}

func (x *ReduceRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type ReduceFileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=fileNames,proto3" json:"fileNames,omitempty"`
}

func (x *ReduceFileList) Reset() {
	*x = ReduceFileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceFileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceFileList) ProtoMessage() {}

func (x *ReduceFileList) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceFileList.ProtoReflect.Descriptor instead.
func (*ReduceFileList) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ReduceFileList) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

type MapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId           string   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ChunkNames      []string `protobuf:"bytes,2,rep,name=ChunkNames,proto3" json:"ChunkNames,omitempty"`
	Reducers        []string `protobuf:"bytes,3,rep,name=Reducers,proto3" json:"Reducers,omitempty"`
	NumberOfMappers int32    `protobuf:"varint,4,opt,name=numberOfMappers,proto3" json:"numberOfMappers,omitempty"`
	Plugin          []byte   `protobuf:"bytes,5,opt,name=plugin,proto3" json:"plugin,omitempty"`
	PluginName      string   `protobuf:"bytes,6,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
}

func (x *MapRequest) Reset() {
	*x = MapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRequest) ProtoMessage() {}

func (x *MapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRequest.ProtoReflect.Descriptor instead.
func (*MapRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *MapRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *MapRequest) GetChunkNames() []string {
	if x != nil {
		return x.ChunkNames
	}
	return nil
}

func (x *MapRequest) GetReducers() []string {
	if x != nil {
		return x.Reducers
	}
	return nil
}

func (x *MapRequest) GetNumberOfMappers() int32 {
	if x != nil {
		return x.NumberOfMappers
	}
	return 0
}

func (x *MapRequest) GetPlugin() []byte {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *MapRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

type RunJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RunJobResponse_MapResponse
	//	*RunJobResponse_ReduceResponse
	Response isRunJobResponse_Response `protobuf_oneof:"response"`
}

func (x *RunJobResponse) Reset() {
	*x = RunJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunJobResponse) ProtoMessage() {}

func (x *RunJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunJobResponse.ProtoReflect.Descriptor instead.
func (*RunJobResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (m *RunJobResponse) GetResponse() isRunJobResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RunJobResponse) GetMapResponse() *MapResponse {
	if x, ok := x.GetResponse().(*RunJobResponse_MapResponse); ok {
		return x.MapResponse
	}
	return nil
}

func (x *RunJobResponse) GetReduceResponse() *ReduceResponse {
	if x, ok := x.GetResponse().(*RunJobResponse_ReduceResponse); ok {
		return x.ReduceResponse
	}
	return nil
}

type isRunJobResponse_Response interface {
	isRunJobResponse_Response()
}

type RunJobResponse_MapResponse struct {
	MapResponse *MapResponse `protobuf:"bytes,1,opt,name=MapResponse,proto3,oneof"`
}

type RunJobResponse_ReduceResponse struct {
	ReduceResponse *ReduceResponse `protobuf:"bytes,2,opt,name=ReduceResponse,proto3,oneof"`
}

func (*RunJobResponse_MapResponse) isRunJobResponse_Response() {}

func (*RunJobResponse_ReduceResponse) isRunJobResponse_Response() {}

type MapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkName          string               `protobuf:"bytes,1,opt,name=ChunkName,proto3" json:"ChunkName,omitempty"`
	ShufflingComplete  bool                 `protobuf:"varint,2,opt,name=ShufflingComplete,proto3" json:"ShufflingComplete,omitempty"`
	FilesSentToReducer []*FileSentToReducer `protobuf:"bytes,3,rep,name=FilesSentToReducer,proto3" json:"FilesSentToReducer,omitempty"`
	ErrorMessage       string               `protobuf:"bytes,4,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *MapResponse) Reset() {
	*x = MapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapResponse) ProtoMessage() {}

func (x *MapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapResponse.ProtoReflect.Descriptor instead.
func (*MapResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

func (x *MapResponse) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *MapResponse) GetShufflingComplete() bool {
	if x != nil {
		return x.ShufflingComplete
	}
	return false
}

func (x *MapResponse) GetFilesSentToReducer() []*FileSentToReducer {
	if x != nil {
		return x.FilesSentToReducer
	}
	return nil
}

func (x *MapResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FileSentToReducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReducerIp string `protobuf:"bytes,1,opt,name=reducerIp,proto3" json:"reducerIp,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *FileSentToReducer) Reset() {
	*x = FileSentToReducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSentToReducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSentToReducer) ProtoMessage() {}

func (x *FileSentToReducer) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSentToReducer.ProtoReflect.Descriptor instead.
func (*FileSentToReducer) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

func (x *FileSentToReducer) GetReducerIp() string {
	if x != nil {
		return x.ReducerIp
	}
	return ""
}

func (x *FileSentToReducer) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ReduceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	NodeIp       string `protobuf:"bytes,2,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *ReduceResponse) Reset() {
	*x = ReduceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceResponse) ProtoMessage() {}

func (x *ReduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceResponse.ProtoReflect.Descriptor instead.
func (*ReduceResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ReduceResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReduceResponse) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *ReduceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	DestPath string `protobuf:"bytes,2,opt,name=DestPath,proto3" json:"DestPath,omitempty"`
}

func (x *FileInfoRequest) Reset() {
	*x = FileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoRequest) ProtoMessage() {}

func (x *FileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoRequest.ProtoReflect.Descriptor instead.
func (*FileInfoRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

func (x *FileInfoRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileInfoRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

type FileInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string         `protobuf:"bytes,1,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	FileSize     int64          `protobuf:"varint,2,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	ChunksPerIp  []*ChunksPerIp `protobuf:"bytes,3,rep,name=ChunksPerIp,proto3" json:"ChunksPerIp,omitempty"`
}

func (x *FileInfoResponse) Reset() {
	*x = FileInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoResponse) ProtoMessage() {}

func (x *FileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoResponse.ProtoReflect.Descriptor instead.
func (*FileInfoResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

func (x *FileInfoResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *FileInfoResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfoResponse) GetChunksPerIp() []*ChunksPerIp {
	if x != nil {
		return x.ChunksPerIp
	}
	return nil
}

type ChunksPerIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp    string   `protobuf:"bytes,1,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
	ChunkName []string `protobuf:"bytes,2,rep,name=chunkName,proto3" json:"chunkName,omitempty"`
}

func (x *ChunksPerIp) Reset() {
	*x = ChunksPerIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksPerIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksPerIp) ProtoMessage() {}

func (x *ChunksPerIp) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksPerIp.ProtoReflect.Descriptor instead.
func (*ChunksPerIp) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *ChunksPerIp) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *ChunksPerIp) GetChunkName() []string {
	if x != nil {
		return x.ChunkName
	}
	return nil
}

type ComputeJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Commands:
	//	*ComputeJob_MapReduceRequest
	//	*ComputeJob_MapReduceResponse
	Commands isComputeJob_Commands `protobuf_oneof:"commands"`
}

func (x *ComputeJob) Reset() {
	*x = ComputeJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeJob) ProtoMessage() {}

func (x *ComputeJob) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeJob.ProtoReflect.Descriptor instead.
func (*ComputeJob) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (m *ComputeJob) GetCommands() isComputeJob_Commands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (x *ComputeJob) GetMapReduceRequest() *MapReduceRequest {
	if x, ok := x.GetCommands().(*ComputeJob_MapReduceRequest); ok {
		return x.MapReduceRequest
	}
	return nil
}

func (x *ComputeJob) GetMapReduceResponse() *MapReduceResponse {
	if x, ok := x.GetCommands().(*ComputeJob_MapReduceResponse); ok {
		return x.MapReduceResponse
	}
	return nil
}

type isComputeJob_Commands interface {
	isComputeJob_Commands()
}

type ComputeJob_MapReduceRequest struct {
	MapReduceRequest *MapReduceRequest `protobuf:"bytes,1,opt,name=MapReduceRequest,proto3,oneof"`
}

type ComputeJob_MapReduceResponse struct {
	MapReduceResponse *MapReduceResponse `protobuf:"bytes,2,opt,name=MapReduceResponse,proto3,oneof"`
}

func (*ComputeJob_MapReduceRequest) isComputeJob_Commands() {}

func (*ComputeJob_MapReduceResponse) isComputeJob_Commands() {}

type MapReduceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath           string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	PluginName         string `protobuf:"bytes,2,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
	Plugin             []byte `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
	NumOfMappers       int32  `protobuf:"varint,4,opt,name=numOfMappers,proto3" json:"numOfMappers,omitempty"`
	NumOfReducers      int32  `protobuf:"varint,5,opt,name=numOfReducers,proto3" json:"numOfReducers,omitempty"`
	ReducerKey         string `protobuf:"bytes,6,opt,name=reducerKey,proto3" json:"reducerKey,omitempty"`
	ServerAddr         string `protobuf:"bytes,7,opt,name=serverAddr,proto3" json:"serverAddr,omitempty"`
	DestPath           string `protobuf:"bytes,8,opt,name=destPath,proto3" json:"destPath,omitempty"`
	MaxParallelization bool   `protobuf:"varint,9,opt,name=maxParallelization,proto3" json:"maxParallelization,omitempty"`
}

func (x *MapReduceRequest) Reset() {
	*x = MapReduceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapReduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapReduceRequest) ProtoMessage() {}

func (x *MapReduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapReduceRequest.ProtoReflect.Descriptor instead.
func (*MapReduceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20}
}

func (x *MapReduceRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *MapReduceRequest) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *MapReduceRequest) GetPlugin() []byte {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *MapReduceRequest) GetNumOfMappers() int32 {
	if x != nil {
		return x.NumOfMappers
	}
	return 0
}

func (x *MapReduceRequest) GetNumOfReducers() int32 {
	if x != nil {
		return x.NumOfReducers
	}
	return 0
}

func (x *MapReduceRequest) GetReducerKey() string {
	if x != nil {
		return x.ReducerKey
	}
	return ""
}

func (x *MapReduceRequest) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *MapReduceRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

func (x *MapReduceRequest) GetMaxParallelization() bool {
	if x != nil {
		return x.MaxParallelization
	}
	return false
}

type MapReduceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *MapReduceResponse) Reset() {
	*x = MapReduceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapReduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapReduceResponse) ProtoMessage() {}

func (x *MapReduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapReduceResponse.ProtoReflect.Descriptor instead.
func (*MapReduceResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{21}
}

func (x *MapReduceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// -----------------chunk transfer to node ----------------
type ChunkReceivedAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage   string `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	FileId         uint64 `protobuf:"varint,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ChunkNumber    uint64 `protobuf:"varint,3,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	ChunkName      string `protobuf:"bytes,4,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkSize      uint64 `protobuf:"varint,5,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	StartingOffset uint64 `protobuf:"varint,6,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
	Replication    bool   `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
}

func (x *ChunkReceivedAck) Reset() {
	*x = ChunkReceivedAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkReceivedAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkReceivedAck) ProtoMessage() {}

func (x *ChunkReceivedAck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkReceivedAck.ProtoReflect.Descriptor instead.
func (*ChunkReceivedAck) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{22}
}

func (x *ChunkReceivedAck) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ChunkReceivedAck) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ChunkReceivedAck) GetChunkNumber() uint64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *ChunkReceivedAck) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *ChunkReceivedAck) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ChunkReceivedAck) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

func (x *ChunkReceivedAck) GetReplication() bool {
	if x != nil {
		return x.Replication
	}
	return false
}

type ChunkedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId         uint64 `protobuf:"varint,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ChunkName      string `protobuf:"bytes,2,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkNumber    uint64 `protobuf:"varint,3,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	ChunkSize      uint64 `protobuf:"varint,4,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	StartingOffset uint64 `protobuf:"varint,5,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
	ChunkedFile    []byte `protobuf:"bytes,6,opt,name=chunkedFile,proto3" json:"chunkedFile,omitempty"`
	Replication    bool   `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
}

func (x *ChunkedFile) Reset() {
	*x = ChunkedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkedFile) ProtoMessage() {}

func (x *ChunkedFile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkedFile.ProtoReflect.Descriptor instead.
func (*ChunkedFile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{23}
}

func (x *ChunkedFile) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ChunkedFile) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *ChunkedFile) GetChunkNumber() uint64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *ChunkedFile) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ChunkedFile) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

func (x *ChunkedFile) GetChunkedFile() []byte {
	if x != nil {
		return x.ChunkedFile
	}
	return nil
}

func (x *ChunkedFile) GetReplication() bool {
	if x != nil {
		return x.Replication
	}
	return false
}

// -----------------chunk transfer from node --------------
type GetChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkName   string `protobuf:"bytes,1,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkNumber uint64 `protobuf:"varint,2,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{24}
}

func (x *GetChunkRequest) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *GetChunkRequest) GetChunkNumber() uint64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

type GetChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkName   string `protobuf:"bytes,1,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkedData []byte `protobuf:"bytes,2,opt,name=chunkedData,proto3" json:"chunkedData,omitempty"`
	Error       string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetChunkResponse) Reset() {
	*x = GetChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkResponse) ProtoMessage() {}

func (x *GetChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkResponse.ProtoReflect.Descriptor instead.
func (*GetChunkResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{25}
}

func (x *GetChunkResponse) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *GetChunkResponse) GetChunkedData() []byte {
	if x != nil {
		return x.ChunkedData
	}
	return nil
}

func (x *GetChunkResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// -----------------replica messages ----------------------
type SendReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkName      string `protobuf:"bytes,1,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	FileId         uint64 `protobuf:"varint,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ChunkNumber    uint64 `protobuf:"varint,3,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	ChunkSize      uint64 `protobuf:"varint,4,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	TargetIp       string `protobuf:"bytes,5,opt,name=targetIp,proto3" json:"targetIp,omitempty"`
	StartingOffset uint64 `protobuf:"varint,6,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
	Replication    bool   `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
}

func (x *SendReplicaRequest) Reset() {
	*x = SendReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReplicaRequest) ProtoMessage() {}

func (x *SendReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReplicaRequest.ProtoReflect.Descriptor instead.
func (*SendReplicaRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{26}
}

func (x *SendReplicaRequest) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *SendReplicaRequest) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *SendReplicaRequest) GetChunkNumber() uint64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *SendReplicaRequest) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *SendReplicaRequest) GetTargetIp() string {
	if x != nil {
		return x.TargetIp
	}
	return ""
}

func (x *SendReplicaRequest) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

func (x *SendReplicaRequest) GetReplication() bool {
	if x != nil {
		return x.Replication
	}
	return false
}

// -----------------command responses----------------------
type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Responses:
	//	*CommandResponse_LsResponse
	//	*CommandResponse_CdResponse
	//	*CommandResponse_MkdirResponse
	//	*CommandResponse_ShowNodesResponse
	//	*CommandResponse_DeleteFileResponse
	//	*CommandResponse_ShareFileResponse
	//	*CommandResponse_GetFileResponse
	//	*CommandResponse_PwdResponse
	Responses isCommandResponse_Responses `protobuf_oneof:"responses"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{27}
}

func (m *CommandResponse) GetResponses() isCommandResponse_Responses {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (x *CommandResponse) GetLsResponse() *LsResponse {
	if x, ok := x.GetResponses().(*CommandResponse_LsResponse); ok {
		return x.LsResponse
	}
	return nil
}

func (x *CommandResponse) GetCdResponse() *CdResponse {
	if x, ok := x.GetResponses().(*CommandResponse_CdResponse); ok {
		return x.CdResponse
	}
	return nil
}

func (x *CommandResponse) GetMkdirResponse() *MkdirResponse {
	if x, ok := x.GetResponses().(*CommandResponse_MkdirResponse); ok {
		return x.MkdirResponse
	}
	return nil
}

func (x *CommandResponse) GetShowNodesResponse() *ShowNodesResponse {
	if x, ok := x.GetResponses().(*CommandResponse_ShowNodesResponse); ok {
		return x.ShowNodesResponse
	}
	return nil
}

func (x *CommandResponse) GetDeleteFileResponse() *DeleteFileResponse {
	if x, ok := x.GetResponses().(*CommandResponse_DeleteFileResponse); ok {
		return x.DeleteFileResponse
	}
	return nil
}

func (x *CommandResponse) GetShareFileResponse() *ShareFileResponse {
	if x, ok := x.GetResponses().(*CommandResponse_ShareFileResponse); ok {
		return x.ShareFileResponse
	}
	return nil
}

func (x *CommandResponse) GetGetFileResponse() *GetFileResponse {
	if x, ok := x.GetResponses().(*CommandResponse_GetFileResponse); ok {
		return x.GetFileResponse
	}
	return nil
}

func (x *CommandResponse) GetPwdResponse() *PwdResponse {
	if x, ok := x.GetResponses().(*CommandResponse_PwdResponse); ok {
		return x.PwdResponse
	}
	return nil
}

type isCommandResponse_Responses interface {
	isCommandResponse_Responses()
}

type CommandResponse_LsResponse struct {
	LsResponse *LsResponse `protobuf:"bytes,1,opt,name=LsResponse,proto3,oneof"`
}

type CommandResponse_CdResponse struct {
	CdResponse *CdResponse `protobuf:"bytes,2,opt,name=CdResponse,proto3,oneof"`
}

type CommandResponse_MkdirResponse struct {
	MkdirResponse *MkdirResponse `protobuf:"bytes,3,opt,name=MkdirResponse,proto3,oneof"`
}

type CommandResponse_ShowNodesResponse struct {
	ShowNodesResponse *ShowNodesResponse `protobuf:"bytes,4,opt,name=ShowNodesResponse,proto3,oneof"`
}

type CommandResponse_DeleteFileResponse struct {
	DeleteFileResponse *DeleteFileResponse `protobuf:"bytes,5,opt,name=DeleteFileResponse,proto3,oneof"`
}

type CommandResponse_ShareFileResponse struct {
	ShareFileResponse *ShareFileResponse `protobuf:"bytes,6,opt,name=ShareFileResponse,proto3,oneof"`
}

type CommandResponse_GetFileResponse struct {
	GetFileResponse *GetFileResponse `protobuf:"bytes,7,opt,name=GetFileResponse,proto3,oneof"`
}

type CommandResponse_PwdResponse struct {
	PwdResponse *PwdResponse `protobuf:"bytes,8,opt,name=PwdResponse,proto3,oneof"`
}

func (*CommandResponse_LsResponse) isCommandResponse_Responses() {}

func (*CommandResponse_CdResponse) isCommandResponse_Responses() {}

func (*CommandResponse_MkdirResponse) isCommandResponse_Responses() {}

func (*CommandResponse_ShowNodesResponse) isCommandResponse_Responses() {}

func (*CommandResponse_DeleteFileResponse) isCommandResponse_Responses() {}

func (*CommandResponse_ShareFileResponse) isCommandResponse_Responses() {}

func (*CommandResponse_GetFileResponse) isCommandResponse_Responses() {}

func (*CommandResponse_PwdResponse) isCommandResponse_Responses() {}

type LsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList     string `protobuf:"bytes,1,opt,name=fileList,proto3" json:"fileList,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *LsResponse) Reset() {
	*x = LsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsResponse) ProtoMessage() {}

func (x *LsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsResponse.ProtoReflect.Descriptor instead.
func (*LsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{28}
}

func (x *LsResponse) GetFileList() string {
	if x != nil {
		return x.FileList
	}
	return ""
}

func (x *LsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPath      string `protobuf:"bytes,1,opt,name=newPath,proto3" json:"newPath,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *CdResponse) Reset() {
	*x = CdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdResponse) ProtoMessage() {}

func (x *CdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdResponse.ProtoReflect.Descriptor instead.
func (*CdResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29}
}

func (x *CdResponse) GetNewPath() string {
	if x != nil {
		return x.NewPath
	}
	return ""
}

func (x *CdResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type MkdirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *MkdirResponse) Reset() {
	*x = MkdirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirResponse) ProtoMessage() {}

func (x *MkdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirResponse.ProtoReflect.Descriptor instead.
func (*MkdirResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{30}
}

func (x *MkdirResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ShowNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeList     string `protobuf:"bytes,1,opt,name=nodeList,proto3" json:"nodeList,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *ShowNodesResponse) Reset() {
	*x = ShowNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowNodesResponse) ProtoMessage() {}

func (x *ShowNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowNodesResponse.ProtoReflect.Descriptor instead.
func (*ShowNodesResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{31}
}

func (x *ShowNodesResponse) GetNodeList() string {
	if x != nil {
		return x.NodeList
	}
	return ""
}

func (x *ShowNodesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteFileResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DeleteFileResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ShareFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkPerNode map[string]int64 `protobuf:"bytes,1,rep,name=chunkPerNode,proto3" json:"chunkPerNode,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FileId       uint64           `protobuf:"varint,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ErrorMessage string           `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *ShareFileResponse) Reset() {
	*x = ShareFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileResponse) ProtoMessage() {}

func (x *ShareFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileResponse.ProtoReflect.Descriptor instead.
func (*ShareFileResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{33}
}

func (x *ShareFileResponse) GetChunkPerNode() map[string]int64 {
	if x != nil {
		return x.ChunkPerNode
	}
	return nil
}

func (x *ShareFileResponse) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ShareFileResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ShareFileNodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeAddress        string                `protobuf:"bytes,1,opt,name=nodeAddress,proto3" json:"nodeAddress,omitempty"`
	FileId             uint64                `protobuf:"varint,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ChunkNameAndNumber []*ChunkNameAndNumber `protobuf:"bytes,3,rep,name=chunkNameAndNumber,proto3" json:"chunkNameAndNumber,omitempty"`
}

func (x *ShareFileNodeAddress) Reset() {
	*x = ShareFileNodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileNodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileNodeAddress) ProtoMessage() {}

func (x *ShareFileNodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileNodeAddress.ProtoReflect.Descriptor instead.
func (*ShareFileNodeAddress) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{34}
}

func (x *ShareFileNodeAddress) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *ShareFileNodeAddress) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ShareFileNodeAddress) GetChunkNameAndNumber() []*ChunkNameAndNumber {
	if x != nil {
		return x.ChunkNameAndNumber
	}
	return nil
}

type ChunkNameAndNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkName      string `protobuf:"bytes,1,opt,name=chunkName,proto3" json:"chunkName,omitempty"`
	ChunkNumber    uint64 `protobuf:"varint,2,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	StartingOffset uint64 `protobuf:"varint,3,opt,name=startingOffset,proto3" json:"startingOffset,omitempty"`
}

func (x *ChunkNameAndNumber) Reset() {
	*x = ChunkNameAndNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkNameAndNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkNameAndNumber) ProtoMessage() {}

func (x *ChunkNameAndNumber) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkNameAndNumber.ProtoReflect.Descriptor instead.
func (*ChunkNameAndNumber) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35}
}

func (x *ChunkNameAndNumber) GetChunkName() string {
	if x != nil {
		return x.ChunkName
	}
	return ""
}

func (x *ChunkNameAndNumber) GetChunkNumber() uint64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *ChunkNameAndNumber) GetStartingOffset() uint64 {
	if x != nil {
		return x.StartingOffset
	}
	return 0
}

type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//add proper response
	ErrorMessage  string           `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	FileSize      uint64           `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileName      string           `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunksPerNode []*ChunksPerNode `protobuf:"bytes,4,rep,name=chunksPerNode,proto3" json:"chunksPerNode,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36}
}

func (x *GetFileResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetFileResponse) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *GetFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetFileResponse) GetChunksPerNode() []*ChunksPerNode {
	if x != nil {
		return x.ChunksPerNode
	}
	return nil
}

type ChunksPerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp             string                `protobuf:"bytes,1,opt,name=nodeIp,proto3" json:"nodeIp,omitempty"`
	ChunkNameAndNumber []*ChunkNameAndNumber `protobuf:"bytes,2,rep,name=chunkNameAndNumber,proto3" json:"chunkNameAndNumber,omitempty"`
}

func (x *ChunksPerNode) Reset() {
	*x = ChunksPerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksPerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksPerNode) ProtoMessage() {}

func (x *ChunksPerNode) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksPerNode.ProtoReflect.Descriptor instead.
func (*ChunksPerNode) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{37}
}

func (x *ChunksPerNode) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *ChunksPerNode) GetChunkNameAndNumber() []*ChunkNameAndNumber {
	if x != nil {
		return x.ChunkNameAndNumber
	}
	return nil
}

type PwdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryPath string `protobuf:"bytes,1,opt,name=directoryPath,proto3" json:"directoryPath,omitempty"`
	ErrorMessage  string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *PwdResponse) Reset() {
	*x = PwdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PwdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PwdResponse) ProtoMessage() {}

func (x *PwdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PwdResponse.ProtoReflect.Descriptor instead.
func (*PwdResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{38}
}

func (x *PwdResponse) GetDirectoryPath() string {
	if x != nil {
		return x.DirectoryPath
	}
	return ""
}

func (x *PwdResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ClientCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Commands:
	//	*ClientCommands_ListFiles
	//	*ClientCommands_ChangeDir
	//	*ClientCommands_MakeDir
	//	*ClientCommands_ShowNodes
	//	*ClientCommands_DeleteFile
	//	*ClientCommands_ShareFile
	//	*ClientCommands_GetFile
	//	*ClientCommands_PrintWorkingDir
	Commands isClientCommands_Commands `protobuf_oneof:"commands"`
}

func (x *ClientCommands) Reset() {
	*x = ClientCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCommands) ProtoMessage() {}

func (x *ClientCommands) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCommands.ProtoReflect.Descriptor instead.
func (*ClientCommands) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{39}
}

func (m *ClientCommands) GetCommands() isClientCommands_Commands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (x *ClientCommands) GetListFiles() *ListFiles {
	if x, ok := x.GetCommands().(*ClientCommands_ListFiles); ok {
		return x.ListFiles
	}
	return nil
}

func (x *ClientCommands) GetChangeDir() *ChangeDir {
	if x, ok := x.GetCommands().(*ClientCommands_ChangeDir); ok {
		return x.ChangeDir
	}
	return nil
}

func (x *ClientCommands) GetMakeDir() *MakeDir {
	if x, ok := x.GetCommands().(*ClientCommands_MakeDir); ok {
		return x.MakeDir
	}
	return nil
}

func (x *ClientCommands) GetShowNodes() *ShowNodes {
	if x, ok := x.GetCommands().(*ClientCommands_ShowNodes); ok {
		return x.ShowNodes
	}
	return nil
}

func (x *ClientCommands) GetDeleteFile() *DeleteFile {
	if x, ok := x.GetCommands().(*ClientCommands_DeleteFile); ok {
		return x.DeleteFile
	}
	return nil
}

func (x *ClientCommands) GetShareFile() *ShareFile {
	if x, ok := x.GetCommands().(*ClientCommands_ShareFile); ok {
		return x.ShareFile
	}
	return nil
}

func (x *ClientCommands) GetGetFile() *GetFile {
	if x, ok := x.GetCommands().(*ClientCommands_GetFile); ok {
		return x.GetFile
	}
	return nil
}

func (x *ClientCommands) GetPrintWorkingDir() *PrintWorkingDir {
	if x, ok := x.GetCommands().(*ClientCommands_PrintWorkingDir); ok {
		return x.PrintWorkingDir
	}
	return nil
}

type isClientCommands_Commands interface {
	isClientCommands_Commands()
}

type ClientCommands_ListFiles struct {
	ListFiles *ListFiles `protobuf:"bytes,1,opt,name=ListFiles,proto3,oneof"`
}

type ClientCommands_ChangeDir struct {
	ChangeDir *ChangeDir `protobuf:"bytes,2,opt,name=ChangeDir,proto3,oneof"`
}

type ClientCommands_MakeDir struct {
	MakeDir *MakeDir `protobuf:"bytes,3,opt,name=MakeDir,proto3,oneof"`
}

type ClientCommands_ShowNodes struct {
	ShowNodes *ShowNodes `protobuf:"bytes,4,opt,name=ShowNodes,proto3,oneof"`
}

type ClientCommands_DeleteFile struct {
	DeleteFile *DeleteFile `protobuf:"bytes,5,opt,name=DeleteFile,proto3,oneof"`
}

type ClientCommands_ShareFile struct {
	ShareFile *ShareFile `protobuf:"bytes,6,opt,name=ShareFile,proto3,oneof"`
}

type ClientCommands_GetFile struct {
	GetFile *GetFile `protobuf:"bytes,7,opt,name=GetFile,proto3,oneof"`
}

type ClientCommands_PrintWorkingDir struct {
	PrintWorkingDir *PrintWorkingDir `protobuf:"bytes,8,opt,name=PrintWorkingDir,proto3,oneof"`
}

func (*ClientCommands_ListFiles) isClientCommands_Commands() {}

func (*ClientCommands_ChangeDir) isClientCommands_Commands() {}

func (*ClientCommands_MakeDir) isClientCommands_Commands() {}

func (*ClientCommands_ShowNodes) isClientCommands_Commands() {}

func (*ClientCommands_DeleteFile) isClientCommands_Commands() {}

func (*ClientCommands_ShareFile) isClientCommands_Commands() {}

func (*ClientCommands_GetFile) isClientCommands_Commands() {}

func (*ClientCommands_PrintWorkingDir) isClientCommands_Commands() {}

type ListFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListFiles) Reset() {
	*x = ListFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFiles) ProtoMessage() {}

func (x *ListFiles) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFiles.ProtoReflect.Descriptor instead.
func (*ListFiles) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{40}
}

func (x *ListFiles) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ChangeDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDir string `protobuf:"bytes,1,opt,name=currentDir,proto3" json:"currentDir,omitempty"`
	TargetDir  string `protobuf:"bytes,2,opt,name=targetDir,proto3" json:"targetDir,omitempty"`
}

func (x *ChangeDir) Reset() {
	*x = ChangeDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDir) ProtoMessage() {}

func (x *ChangeDir) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDir.ProtoReflect.Descriptor instead.
func (*ChangeDir) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{41}
}

func (x *ChangeDir) GetCurrentDir() string {
	if x != nil {
		return x.CurrentDir
	}
	return ""
}

func (x *ChangeDir) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

type MakeDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetDir string `protobuf:"bytes,1,opt,name=targetDir,proto3" json:"targetDir,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MakeDir) Reset() {
	*x = MakeDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeDir) ProtoMessage() {}

func (x *MakeDir) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeDir.ProtoReflect.Descriptor instead.
func (*MakeDir) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{42}
}

func (x *MakeDir) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

func (x *MakeDir) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PrintWorkingDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetDir string `protobuf:"bytes,1,opt,name=targetDir,proto3" json:"targetDir,omitempty"`
}

func (x *PrintWorkingDir) Reset() {
	*x = PrintWorkingDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintWorkingDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintWorkingDir) ProtoMessage() {}

func (x *PrintWorkingDir) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintWorkingDir.ProtoReflect.Descriptor instead.
func (*PrintWorkingDir) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{43}
}

func (x *PrintWorkingDir) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

type ShowNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowNodes) Reset() {
	*x = ShowNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowNodes) ProtoMessage() {}

func (x *ShowNodes) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowNodes.ProtoReflect.Descriptor instead.
func (*ShowNodes) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{44}
}

type DeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetDir string `protobuf:"bytes,1,opt,name=targetDir,proto3" json:"targetDir,omitempty"`
}

func (x *DeleteFile) Reset() {
	*x = DeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFile) ProtoMessage() {}

func (x *DeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFile.ProtoReflect.Descriptor instead.
func (*DeleteFile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteFile) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

type ShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetDir  string `protobuf:"bytes,1,opt,name=targetDir,proto3" json:"targetDir,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize   uint64 `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ChunkCount uint64 `protobuf:"varint,4,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"`
}

func (x *ShareFile) Reset() {
	*x = ShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFile) ProtoMessage() {}

func (x *ShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFile.ProtoReflect.Descriptor instead.
func (*ShareFile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{46}
}

func (x *ShareFile) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

func (x *ShareFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ShareFile) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ShareFile) GetChunkCount() uint64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

type GetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPath string `protobuf:"bytes,2,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
}

func (x *GetFile) Reset() {
	*x = GetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFile) ProtoMessage() {}

func (x *GetFile) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFile.ProtoReflect.Descriptor instead.
func (*GetFile) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{47}
}

func (x *GetFile) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x64,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x06, 0x0a, 0x07, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x4d, 0x52, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x4d, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x4d, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x4c, 0x0a, 0x0e, 0x4d, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x02,
	0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x75, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x75, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x52,
	0x0a, 0x13, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x53, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x12, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x49, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x49,
	0x70, 0x52, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x49, 0x70, 0x22, 0x43,
	0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x49, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x12, 0x3f, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x6b,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x4c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x4c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x43, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x50, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x50, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0a,
	0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x7c, 0x0a, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa3, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x43, 0x0a, 0x12,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x57, 0x0a, 0x0b, 0x50, 0x77, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72, 0x48, 0x00, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x53, 0x68,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x22, 0x1f, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x49, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x22, 0x3b,
	0x0a, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x0f, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x22, 0x0b, 0x0a, 0x09,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData = file_messages_proto_rawDesc
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_proto_rawDescData)
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_messages_proto_goTypes = []interface{}{
	(*Registration)(nil),         // 0: Registration
	(*RegistrationAck)(nil),      // 1: RegistrationAck
	(*HeartBeat)(nil),            // 2: HeartBeat
	(*Wrapper)(nil),              // 3: Wrapper
	(*MRStatusUpdate)(nil),       // 4: MRStatusUpdate
	(*ChunkedMappedFile)(nil),    // 5: ChunkedMappedFile
	(*ComputeCommands)(nil),      // 6: ComputeCommands
	(*RunJobRequest)(nil),        // 7: RunJobRequest
	(*PluginDownload)(nil),       // 8: PluginDownload
	(*ReduceRequest)(nil),        // 9: ReduceRequest
	(*ReduceFileList)(nil),       // 10: ReduceFileList
	(*MapRequest)(nil),           // 11: MapRequest
	(*RunJobResponse)(nil),       // 12: RunJobResponse
	(*MapResponse)(nil),          // 13: MapResponse
	(*FileSentToReducer)(nil),    // 14: FileSentToReducer
	(*ReduceResponse)(nil),       // 15: ReduceResponse
	(*FileInfoRequest)(nil),      // 16: FileInfoRequest
	(*FileInfoResponse)(nil),     // 17: FileInfoResponse
	(*ChunksPerIp)(nil),          // 18: ChunksPerIp
	(*ComputeJob)(nil),           // 19: ComputeJob
	(*MapReduceRequest)(nil),     // 20: MapReduceRequest
	(*MapReduceResponse)(nil),    // 21: MapReduceResponse
	(*ChunkReceivedAck)(nil),     // 22: ChunkReceivedAck
	(*ChunkedFile)(nil),          // 23: ChunkedFile
	(*GetChunkRequest)(nil),      // 24: GetChunkRequest
	(*GetChunkResponse)(nil),     // 25: GetChunkResponse
	(*SendReplicaRequest)(nil),   // 26: SendReplicaRequest
	(*CommandResponse)(nil),      // 27: CommandResponse
	(*LsResponse)(nil),           // 28: LsResponse
	(*CdResponse)(nil),           // 29: CdResponse
	(*MkdirResponse)(nil),        // 30: MkdirResponse
	(*ShowNodesResponse)(nil),    // 31: ShowNodesResponse
	(*DeleteFileResponse)(nil),   // 32: DeleteFileResponse
	(*ShareFileResponse)(nil),    // 33: ShareFileResponse
	(*ShareFileNodeAddress)(nil), // 34: ShareFileNodeAddress
	(*ChunkNameAndNumber)(nil),   // 35: ChunkNameAndNumber
	(*GetFileResponse)(nil),      // 36: GetFileResponse
	(*ChunksPerNode)(nil),        // 37: ChunksPerNode
	(*PwdResponse)(nil),          // 38: PwdResponse
	(*ClientCommands)(nil),       // 39: ClientCommands
	(*ListFiles)(nil),            // 40: ListFiles
	(*ChangeDir)(nil),            // 41: ChangeDir
	(*MakeDir)(nil),              // 42: MakeDir
	(*PrintWorkingDir)(nil),      // 43: PrintWorkingDir
	(*ShowNodes)(nil),            // 44: ShowNodes
	(*DeleteFile)(nil),           // 45: DeleteFile
	(*ShareFile)(nil),            // 46: ShareFile
	(*GetFile)(nil),              // 47: GetFile
	nil,                          // 48: ReduceRequest.ReducerFileMapEntry
	nil,                          // 49: ShareFileResponse.ChunkPerNodeEntry
}
var file_messages_proto_depIdxs = []int32{
	0,  // 0: Wrapper.Registration:type_name -> Registration
	1,  // 1: Wrapper.RegistrationAck:type_name -> RegistrationAck
	2,  // 2: Wrapper.HeartBeat:type_name -> HeartBeat
	39, // 3: Wrapper.ClientCommands:type_name -> ClientCommands
	27, // 4: Wrapper.CommandResponse:type_name -> CommandResponse
	23, // 5: Wrapper.ChunkedFile:type_name -> ChunkedFile
	22, // 6: Wrapper.ChunkedReceivedAck:type_name -> ChunkReceivedAck
	26, // 7: Wrapper.SendReplicaRequest:type_name -> SendReplicaRequest
	24, // 8: Wrapper.GetChunkRequest:type_name -> GetChunkRequest
	25, // 9: Wrapper.GetChunkResponse:type_name -> GetChunkResponse
	19, // 10: Wrapper.ComputeJob:type_name -> ComputeJob
	6,  // 11: Wrapper.ComputeCommands:type_name -> ComputeCommands
	4,  // 12: Wrapper.MRStatusUpdate:type_name -> MRStatusUpdate
	16, // 13: ComputeCommands.FileInfoRequest:type_name -> FileInfoRequest
	17, // 14: ComputeCommands.FileInfoResponse:type_name -> FileInfoResponse
	7,  // 15: ComputeCommands.RunJobRequest:type_name -> RunJobRequest
	12, // 16: ComputeCommands.RunJobResponse:type_name -> RunJobResponse
	9,  // 17: RunJobRequest.reduceRequest:type_name -> ReduceRequest
	11, // 18: RunJobRequest.mapRequest:type_name -> MapRequest
	5,  // 19: RunJobRequest.chunkedMappedFile:type_name -> ChunkedMappedFile
	8,  // 20: RunJobRequest.pluginDownload:type_name -> PluginDownload
	48, // 21: ReduceRequest.reducerFileMap:type_name -> ReduceRequest.ReducerFileMapEntry
	13, // 22: RunJobResponse.MapResponse:type_name -> MapResponse
	15, // 23: RunJobResponse.ReduceResponse:type_name -> ReduceResponse
	14, // 24: MapResponse.FilesSentToReducer:type_name -> FileSentToReducer
	18, // 25: FileInfoResponse.ChunksPerIp:type_name -> ChunksPerIp
	20, // 26: ComputeJob.MapReduceRequest:type_name -> MapReduceRequest
	21, // 27: ComputeJob.MapReduceResponse:type_name -> MapReduceResponse
	28, // 28: CommandResponse.LsResponse:type_name -> LsResponse
	29, // 29: CommandResponse.CdResponse:type_name -> CdResponse
	30, // 30: CommandResponse.MkdirResponse:type_name -> MkdirResponse
	31, // 31: CommandResponse.ShowNodesResponse:type_name -> ShowNodesResponse
	32, // 32: CommandResponse.DeleteFileResponse:type_name -> DeleteFileResponse
	33, // 33: CommandResponse.ShareFileResponse:type_name -> ShareFileResponse
	36, // 34: CommandResponse.GetFileResponse:type_name -> GetFileResponse
	38, // 35: CommandResponse.PwdResponse:type_name -> PwdResponse
	49, // 36: ShareFileResponse.chunkPerNode:type_name -> ShareFileResponse.ChunkPerNodeEntry
	35, // 37: ShareFileNodeAddress.chunkNameAndNumber:type_name -> ChunkNameAndNumber
	37, // 38: GetFileResponse.chunksPerNode:type_name -> ChunksPerNode
	35, // 39: ChunksPerNode.chunkNameAndNumber:type_name -> ChunkNameAndNumber
	40, // 40: ClientCommands.ListFiles:type_name -> ListFiles
	41, // 41: ClientCommands.ChangeDir:type_name -> ChangeDir
	42, // 42: ClientCommands.MakeDir:type_name -> MakeDir
	44, // 43: ClientCommands.ShowNodes:type_name -> ShowNodes
	45, // 44: ClientCommands.DeleteFile:type_name -> DeleteFile
	46, // 45: ClientCommands.ShareFile:type_name -> ShareFile
	47, // 46: ClientCommands.GetFile:type_name -> GetFile
	43, // 47: ClientCommands.PrintWorkingDir:type_name -> PrintWorkingDir
	10, // 48: ReduceRequest.ReducerFileMapEntry.value:type_name -> ReduceFileList
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRStatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedMappedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceFileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSentToReducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunksPerIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapReduceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapReduceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkReceivedAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileNodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkNameAndNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunksPerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PwdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintWorkingDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Wrapper_Registration)(nil),
		(*Wrapper_RegistrationAck)(nil),
		(*Wrapper_HeartBeat)(nil),
		(*Wrapper_ClientCommands)(nil),
		(*Wrapper_CommandResponse)(nil),
		(*Wrapper_ChunkedFile)(nil),
		(*Wrapper_ChunkedReceivedAck)(nil),
		(*Wrapper_SendReplicaRequest)(nil),
		(*Wrapper_GetChunkRequest)(nil),
		(*Wrapper_GetChunkResponse)(nil),
		(*Wrapper_ComputeJob)(nil),
		(*Wrapper_ComputeCommands)(nil),
		(*Wrapper_MRStatusUpdate)(nil),
	}
	file_messages_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ComputeCommands_FileInfoRequest)(nil),
		(*ComputeCommands_FileInfoResponse)(nil),
		(*ComputeCommands_RunJobRequest)(nil),
		(*ComputeCommands_RunJobResponse)(nil),
	}
	file_messages_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RunJobRequest_ReduceRequest)(nil),
		(*RunJobRequest_MapRequest)(nil),
		(*RunJobRequest_ChunkedMappedFile)(nil),
		(*RunJobRequest_PluginDownload)(nil),
	}
	file_messages_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RunJobResponse_MapResponse)(nil),
		(*RunJobResponse_ReduceResponse)(nil),
	}
	file_messages_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ComputeJob_MapReduceRequest)(nil),
		(*ComputeJob_MapReduceResponse)(nil),
	}
	file_messages_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*CommandResponse_LsResponse)(nil),
		(*CommandResponse_CdResponse)(nil),
		(*CommandResponse_MkdirResponse)(nil),
		(*CommandResponse_ShowNodesResponse)(nil),
		(*CommandResponse_DeleteFileResponse)(nil),
		(*CommandResponse_ShareFileResponse)(nil),
		(*CommandResponse_GetFileResponse)(nil),
		(*CommandResponse_PwdResponse)(nil),
	}
	file_messages_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ClientCommands_ListFiles)(nil),
		(*ClientCommands_ChangeDir)(nil),
		(*ClientCommands_MakeDir)(nil),
		(*ClientCommands_ShowNodes)(nil),
		(*ClientCommands_DeleteFile)(nil),
		(*ClientCommands_ShareFile)(nil),
		(*ClientCommands_GetFile)(nil),
		(*ClientCommands_PrintWorkingDir)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_rawDesc = nil
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
